{"version":3,"sources":["LatexUtil.ts","GraphView.tsx","LazyCalc.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["latexSubExprToJs","latexString","replace","splitLatexSubExpr","braceStack","currString","splitArray","addCurrString","push","c","React","Component","GraphView","props","canvasRef","state","graphExpr","top","left","right","bottom","tangentLine","indicator","createRef","this","x","y","graphBoundWidth","width","height","graphBoundHeight","evaluate","NaN","pixelResolution","resolution","points","f","undefined","graphPosToCanvasPos","jsExpr","expr","console","log","graphDerivative","derivative","compile","setState","l","dy","slope","pos1","center","pos2","centerPos","buildTangentLinePoints","closed","stroke","strokeWidth","radius","fill","text","unHoverEventHook","pos","ref","onMouseMove","event","mouseX","evt","mouseY","offset","el","rect","getBoundingClientRect","window","scrollX","scrollY","getOffset","current","attrs","container","canvasPosToGraphPos","canHover","fx","dist","Math","abs","h","ddx","bind","hoverEventHook","removeTangentLine","buildPointsList","buildTangentInformation","renderIndicator","addStyles","App","graphView","dxGraphView","latex","className","onChange","mathField","compressed","i","subExprs","nextSubExpr","output","length","subExpr","numer","denom","latexToJs","setFunctionExpr","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.12c29fa4.chunk.js","sourcesContent":["// some very simple latex parsing utils\r\n\r\nexport function latexToJs(latexString: string, compressed = false) {\r\n    let i = 0;\r\n    let subExprs = splitLatexSubExpr(latexString);\r\n\r\n    let nextSubExpr = function() {\r\n        return subExprs[i++];\r\n    }\r\n\r\n    let output = \"\";\r\n\r\n    while (i < subExprs.length) {\r\n        let subExpr = nextSubExpr();\r\n\r\n        if (subExpr === \"\\\\frac\") {\r\n            let numer = latexSubExprToJs(nextSubExpr());\r\n            let denom = latexSubExprToJs(nextSubExpr());\r\n            output += `(${numer}) / (${denom})`;\r\n        } else {\r\n            output += latexSubExprToJs(subExpr);\r\n        }\r\n    }\r\n\r\n    if (compressed) {\r\n        return output.replace(/ /g, \"\");\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nfunction resolveImplicitMultiplication(expr: string) {\r\n    // converts \"2(x+3)\" to \"3*(x+3)\"\r\n\r\n    expr = expr.replace(/\\w(?=\\()/g, \"$&*\"); // converts \"2(\" and \"x(\" to \"x*(\"\r\n    expr = expr.replace(/\\d(?=\\w)/g, \"$&*\"); // converts \"3x\" to \"3*x\"\r\n\r\n    return expr;\r\n}\r\n\r\nexport function latexSubExprToJs(latexString: string) {\r\n    latexString = latexString\r\n        .replace(/\\\\left\\(/g, \"(\")\r\n        .replace(/\\\\right\\)/g, \")\")\r\n        .replace(/\\\\cdot/g, \"*\")\r\n        .replace(/\\\\cos/g, \"cos\")\r\n        .replace(/\\\\sin/g, \"sin\")\r\n        .replace(/\\\\tan/g, \"tan\")\r\n        .replace(/\\\\sqrt/g, \"sqrt\");\r\n    \r\n    return latexString;\r\n}\r\n\r\nexport function splitLatexSubExpr(latexString: string) {\r\n    /*\r\n        transforms \"\\frac{bruh}{2}\" into [\"\\frac\", \"bruh\", \"2\"]\r\n    */\r\n    let braceStack = 0;\r\n    let currString = \"\";\r\n    let enclosedBrace = false;\r\n\r\n    let splitArray: string[] = [];\r\n\r\n    let addCurrString = function () {\r\n        if (!currString) {\r\n            return;\r\n        }\r\n        splitArray.push(currString);\r\n        currString = \"\";\r\n    };\r\n\r\n    for (let c of latexString) {\r\n        if (c === \"{\") {\r\n            if (braceStack === 0) {\r\n                addCurrString();\r\n            }\r\n\r\n            braceStack++;\r\n        } else if (c === \"}\") {\r\n            braceStack--;\r\n\r\n            if (braceStack === 0) {\r\n                addCurrString();\r\n            }\r\n        } else {\r\n            currString += c;\r\n        }\r\n    }\r\n\r\n    addCurrString();\r\n\r\n    return splitArray;\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Line, Circle } from \"react-konva\";\r\nimport Konva from \"konva\";\r\nimport { evaluate, compile, derivative, EvalFunction } from \"mathjs\";\r\nimport { ddx } from \"./LazyCalc\";\r\nimport { KonvaEventObject } from \"konva/types/Node\";\r\n\r\nfunction getOffset(el: Element) {\r\n    const rect = el.getBoundingClientRect();\r\n    return {\r\n        left: rect.left + window.scrollX,\r\n        top: rect.top + window.scrollY,\r\n    };\r\n}\r\n\r\nclass ColoredRect extends React.Component {\r\n    state = {\r\n        color: \"green\",\r\n    };\r\n    handleClick = () => {\r\n        this.setState({\r\n            color: Konva.Util.getRandomColor(),\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Rect\r\n                x={20}\r\n                y={20}\r\n                width={50}\r\n                height={50}\r\n                fill={this.state.color}\r\n                shadowBlur={5}\r\n                onClick={this.handleClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface TangentLine {\r\n    center: [number, number]; // in graph coords not screen coords\r\n    slope: number;\r\n}\r\n\r\ninterface IState {\r\n    graphExpr: EvalFunction | null;\r\n    top: number;\r\n    left: number;\r\n    right: number;\r\n    bottom: number;\r\n    tangentLine: null | TangentLine;\r\n    indicator: [number, number] | null;\r\n}\r\ninterface IProps {\r\n    width: number;\r\n    height: number;\r\n    graphDerivative?: boolean;\r\n    canHover?: boolean;\r\n    hoverEventHook?: (x: number) => void;\r\n    unHoverEventHook?: () => void;\r\n}\r\n\r\nexport default class GraphView extends React.Component<IProps, IState> {\r\n    canvasRef: RefObject<Stage>;\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            graphExpr: null,\r\n            top: -10,\r\n            left: -10,\r\n            right: 10,\r\n            bottom: 10,\r\n            tangentLine: null,\r\n            indicator: null,\r\n        };\r\n\r\n        this.canvasRef = React.createRef();\r\n    }\r\n\r\n    static makeGraphFunction(jsExpr: string) {\r\n        return function (x: number) {\r\n            return evaluate(jsExpr, { x: x });\r\n        };\r\n    }\r\n\r\n    graphBoundWidth() {\r\n        return this.state.right - this.state.left;\r\n    }\r\n\r\n    graphBoundHeight() {\r\n        return this.state.bottom - this.state.top;\r\n    }\r\n\r\n    graphPosToCanvasPos(x: number, y: number): [number, number] {\r\n        return [\r\n            ((x - this.state.left) / this.graphBoundWidth()) * this.props.width,\r\n            this.props.height -\r\n                ((y - this.state.top) / this.graphBoundHeight()) *\r\n                    this.props.height,\r\n        ];\r\n    }\r\n\r\n    canvasPosToGraphPos(x: number, y: number): [number, number] {\r\n        return [\r\n            (x / this.props.width) * this.graphBoundWidth() + this.state.left,\r\n            ((this.props.height - y) / this.props.height) *\r\n                this.graphBoundHeight() +\r\n                this.state.top,\r\n        ];\r\n    }\r\n\r\n    f(x: number) {\r\n        if (!this.state.graphExpr) {\r\n            return NaN;\r\n        }\r\n        return this.state.graphExpr.evaluate({ x: x });\r\n    }\r\n\r\n    buildPointsList(pixelResolution: number): number[] {\r\n        let resolution = this.graphBoundWidth() / this.props.width;\r\n        resolution *= pixelResolution;\r\n\r\n        let points: number[] = [];\r\n\r\n        if (!this.state.graphExpr) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            this.f(0);\r\n            this.f(-1);\r\n        } catch {\r\n            return [];\r\n        }\r\n\r\n        for (let x = this.state.left; x < this.state.right; x += resolution) {\r\n            let y = this.f(x);\r\n\r\n            if (y === NaN || y === undefined || y === null) {\r\n                continue;\r\n            }\r\n\r\n            points.push(...this.graphPosToCanvasPos(x, y));\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    setFunctionExpr(jsExpr: string) {\r\n        console.log(jsExpr);\r\n        let expr;\r\n        try {\r\n            if (this.props.graphDerivative) {\r\n                expr = derivative(jsExpr, \"x\");\r\n            } else {\r\n                expr = compile(jsExpr);\r\n            }\r\n        } catch {\r\n            expr = null;\r\n        }\r\n        this.setState({\r\n            graphExpr: expr,\r\n        });\r\n    }\r\n\r\n    buildTangentLinePoints(\r\n        tangentLine: TangentLine | null,\r\n        l = this.graphBoundWidth()\r\n    ) {\r\n        if (!tangentLine) {\r\n            return [];\r\n        }\r\n\r\n        let dy = l * tangentLine.slope;\r\n\r\n        type Pos = [number, number];\r\n\r\n        let pos1: Pos = [tangentLine.center[0] - l, tangentLine.center[1] - dy];\r\n\r\n        let pos2: Pos = [tangentLine.center[0] + l, tangentLine.center[1] + dy];\r\n\r\n        return [\r\n            ...this.graphPosToCanvasPos(...pos1),\r\n            ...this.graphPosToCanvasPos(...pos2),\r\n        ];\r\n    }\r\n\r\n    buildTangentInformation() {\r\n        if (!this.state.tangentLine) {\r\n            return null;\r\n        }\r\n\r\n        let centerPos = this.graphPosToCanvasPos(\r\n            ...this.state.tangentLine.center\r\n        );\r\n\r\n        return (\r\n            <>\r\n                <Line\r\n                    points={this.buildTangentLinePoints(this.state.tangentLine)}\r\n                    closed={false}\r\n                    stroke=\"#aaaaaa\"\r\n                    strokeWidth={1}\r\n                ></Line>\r\n                <Circle\r\n                    x={centerPos[0]}\r\n                    y={centerPos[1]}\r\n                    radius={3}\r\n                    fill=\"#ff0000\"\r\n                ></Circle>\r\n                <Text\r\n                    text={`slope=${this.state.tangentLine.slope}`}\r\n                    x={centerPos[0]}\r\n                    y={centerPos[1]-10}\r\n                ></Text>\r\n            </>\r\n        );\r\n    }\r\n\r\n    removeTangentLine() {\r\n        if (this.props.unHoverEventHook) {\r\n            this.props.unHoverEventHook();\r\n        }\r\n        this.setState({\r\n            tangentLine: null,\r\n        });\r\n    }\r\n\r\n    renderIndicator() {\r\n        if (!this.state.indicator) {\r\n            return null;\r\n        }\r\n\r\n        let pos = this.graphPosToCanvasPos(...this.state.indicator);\r\n        return (\r\n            <Circle x={pos[0]} y={pos[1]} radius={3} fill=\"#ff0000\"></Circle>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Stage\r\n                width={this.props.width || 640}\r\n                height={this.props.height || 480}\r\n                ref={this.canvasRef}\r\n            >\r\n                <Layer\r\n                    onMouseMove={(event) => {\r\n                        let mouseX = event.evt.x;\r\n                        let mouseY = event.evt.y;\r\n\r\n                        let offset = getOffset(\r\n                            (this.canvasRef.current as any).attrs.container\r\n                        );\r\n\r\n                        mouseX -= offset.left;\r\n                        mouseY -= offset.top;\r\n\r\n                        let [x, y] = this.canvasPosToGraphPos(mouseX, mouseY);\r\n\r\n                        if (!this.props.canHover) {\r\n                            this.removeTangentLine();\r\n                            return;\r\n                        }\r\n\r\n                        if (!this.state.graphExpr) {\r\n                            this.removeTangentLine();\r\n                            return;\r\n                        }\r\n\r\n                        let fx = this.f(x);\r\n\r\n                        let dist = Math.abs(y - fx) * this.graphBoundHeight();\r\n\r\n                        let slope = ddx(this.f.bind(this), x);\r\n\r\n                        if (dist < 40) {\r\n                            if (this.props.hoverEventHook) {\r\n                                this.props.hoverEventHook(x);\r\n                            }\r\n                            this.setState({\r\n                                tangentLine: {\r\n                                    center: [x, fx],\r\n                                    slope: slope,\r\n                                },\r\n                            });\r\n                        } else {\r\n                            this.removeTangentLine();\r\n                        }\r\n                    }}\r\n                >\r\n                    {/* axis lines */}\r\n                    <Rect\r\n                        x={0}\r\n                        y={0}\r\n                        width={this.props.width}\r\n                        height={this.props.height}\r\n                        fill=\"#ffffff\"\r\n                    ></Rect>\r\n                    <Line\r\n                        points={[\r\n                            ...this.graphPosToCanvasPos(0, 1000),\r\n                            ...this.graphPosToCanvasPos(0, -1000),\r\n                        ]}\r\n                        closed={false}\r\n                        stroke=\"#aaaaaa\"\r\n                        strokeWidth={1}\r\n                    ></Line>\r\n                    <Line\r\n                        points={[\r\n                            ...this.graphPosToCanvasPos(-1000, 0),\r\n                            ...this.graphPosToCanvasPos(1000, 0),\r\n                        ]}\r\n                        closed={false}\r\n                        stroke=\"#aaaaaa\"\r\n                        strokeWidth={1}\r\n                    ></Line>\r\n\r\n                    {/* graph line */}\r\n                    <Line\r\n                        points={this.buildPointsList(4)}\r\n                        closed={false}\r\n                        stroke=\"#ac7257\"\r\n                        strokeWidth={2}\r\n                    ></Line>\r\n\r\n                    {/* tangent line */}\r\n\r\n                    {this.buildTangentInformation()}\r\n\r\n                    {/* indicator */}\r\n\r\n                    {this.renderIndicator()}\r\n                </Layer>\r\n            </Stage>\r\n        );\r\n    }\r\n}\r\n","// limit definition: lim h->0\r\n// me:               h = 0.0001\r\n\r\nexport function ddx(f: Function, x: number, h = 0.0001) {\r\n    return (f(x + h) - f(x)) / h;\r\n}\r\n","import React, { Ref, RefObject } from \"react\";\nimport { addStyles, EditableMathField } from \"react-mathquill\";\nimport { splitLatexSubExpr, latexSubExprToJs, latexToJs } from \"./LatexUtil\";\nimport GraphView from \"./GraphView\";\nimport { evaluate, derivative } from \"mathjs\";\nimport { ddx } from \"./LazyCalc\";\nimport { Graph } from \"./Graph\";\n\n// inserts the required css to the <head> block.\n// You can skip this, if you want to do that by yourself.\naddStyles();\n\ninterface IState {\n    latex: string;\n}\n\nexport default class App extends React.Component {\n    state: IState;\n    graphView: RefObject<GraphView>;\n    dxGraphView: RefObject<GraphView>;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            latex: \"\",\n        };\n\n        this.graphView = React.createRef();\n        this.dxGraphView = React.createRef();\n    }\n\n    hoverEventHook(x: number) {\n        this.dxGraphView.current?.setState({\n            indicator: [x, this.dxGraphView.current?.f(x)],\n        });\n    }\n\n    unHoverEventHook() {\n        this.dxGraphView.current?.setState({\n            indicator: null\n        });\n    }\n\n    render() {\n        (window as any).evaluate = evaluate;\n        return (\n            <div className=\"main\">\n                <div className=\"header\">Visualized Derivatives</div>\n                <div className=\"body\">\n                    <div className=\"graphs\">\n                        <div>\n                            Graph (hover to see tangent line)\n                            <GraphView\n                                width={540}\n                                height={320}\n                                ref={this.graphView}\n                                canHover={true}\n                                hoverEventHook={this.hoverEventHook.bind(this)}\n                                unHoverEventHook={this.unHoverEventHook.bind(this)}\n                            ></GraphView>\n                        </div>\n                        <div>\n                            Derivative graph\n                            <GraphView\n                                width={540}\n                                height={320}\n                                graphDerivative={true}\n                                ref={this.dxGraphView}\n                            ></GraphView>\n                        </div>\n                    </div>\n                    <span className=\"function-entry\">\n                        <span className=\"y-equals\">y=</span>\n\n                        <span className=\"f-entry\">\n                            <EditableMathField\n                                latex={this.state.latex} // Initial latex value for the input field\n                                onChange={(mathField) => {\n                                    // Called everytime the input changes\n                                    this.setState({ latex: mathField.latex() });\n\n                                    let expr = latexToJs(mathField.latex());\n                                    // console.log(mathField.latex(), expr);\n                                    this.graphView.current!.setFunctionExpr(\n                                        expr\n                                    );\n                                    this.dxGraphView.current!.setFunctionExpr(\n                                        expr\n                                    );\n                                }}\n                            />\n                        </span>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}